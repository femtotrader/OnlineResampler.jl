var documenterSearchIndex = {"docs":
[{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"This document provides detailed API reference for OnlineResamplers.jl.","category":"page"},{"location":"api_reference/#Table-of-Contents","page":"API Reference","title":"Table of Contents","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Core Types\nMarketDataPoint\nOHLC\nTimeWindow\nAbstract Types\nAbstractResampler\nResampler Types\nMarketResampler\nOHLCResampler\nMeanResampler\nSumResampler\nCore Functions\nOnlineStatsBase Interface\nUtility Functions\nType Constructors\nReturn Values","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Core-Types","page":"API Reference","title":"Core Types","text":"","category":"section"},{"location":"api_reference/#MarketDataPoint","page":"API Reference","title":"MarketDataPoint","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"struct MarketDataPoint{T,P,V}\n    datetime::T\n    price::P\n    volume::V\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Fundamental data structure representing a single market observation.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Type Parameters:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"T: Timestamp type (e.g., DateTime, NanoDate, ZonedDateTime)\nP: Price type (e.g., Float64, FixedDecimal{Int64,4}, Rational{Int})\nV: Volume type (e.g., Float64, FixedDecimal{Int64,2}, Int64)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Constructors:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Automatic type inference for common case\nMarketDataPoint(datetime::DateTime, price::Real, volume::Real)\n\n# Explicit type specification\nMarketDataPoint{T,P,V}(datetime::T, price::P, volume::V)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Basic construction\ndata = MarketDataPoint(DateTime(2024,1,1,9,30,0), 100.0, 1000.0)\n\n# High-precision construction\nusing FixedPointDecimals\nprecise_data = MarketDataPoint{DateTime, FixedDecimal{Int64,4}, FixedDecimal{Int64,2}}(\n    DateTime(2024,1,1,9,30,0), FixedDecimal{Int64,4}(100.1234), FixedDecimal{Int64,2}(1000.50)\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#OHLC","page":"API Reference","title":"OHLC","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"struct OHLC{P}\n    open::P\n    high::P\n    low::P\n    close::P\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Structure representing Open, High, Low, Close price data for a time period.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Type Parameters:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"P: Price type matching the price type used in market data","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"open::P: First price in the time period\nhigh::P: Highest price during the period\nlow::P: Lowest price during the period\nclose::P: Last price in the time period","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Create OHLC manually\nohlc = OHLC{Float64}(100.0, 105.0, 98.0, 102.0)\n\n# Access components\nprintln(\"Range: $(ohlc.high - ohlc.low)\")\nprintln(\"Change: $(ohlc.close - ohlc.open)\")","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#TimeWindow","page":"API Reference","title":"TimeWindow","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"struct TimeWindow{T}\n    start_time::T\n    period::Period\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Represents a time interval for data aggregation.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Type Parameters:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"T: Timestamp type matching the datetime type used in market data","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Fields:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"start_time::T: Beginning of the time window (inclusive)\nperiod::Period: Duration of the window (e.g., Minute(1), Hour(1))","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Create 1-minute window\nwindow = TimeWindow{DateTime}(DateTime(2024,1,1,9,30,0), Minute(1))\n\n# Check window boundaries\nend_time = window_end(window)  # DateTime(2024,1,1,9,31,0)\nnext = next_window(window)     # Starts at 9:31:00","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Abstract-Types","page":"API Reference","title":"Abstract Types","text":"","category":"section"},{"location":"api_reference/#AbstractResampler","page":"API Reference","title":"AbstractResampler","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"abstract type AbstractResampler{T,P,V} <: OnlineStat{MarketDataPoint{T,P,V}} end","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Base type for all market data resamplers, extending OnlineStatsBase functionality.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Type Parameters:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"T: Timestamp type\nP: Price type\nV: Volume type","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Required Interface (for subtypes):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"OnlineStatsBase._fit!(resampler, data::MarketDataPoint{T,P,V})\nOnlineStatsBase.value(resampler)\nOnlineStatsBase._merge!(r1, r2) (optional, for parallel processing)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Automatic Interface (inherited from OnlineStatsBase):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"fit!(resampler, data): Public fitting function\nnobs(resampler): Number of observations processed\nmerge!(r1, r2): Public merging function","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Resampler-Types","page":"API Reference","title":"Resampler Types","text":"","category":"section"},{"location":"api_reference/#MarketResampler","page":"API Reference","title":"MarketResampler","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"struct MarketResampler{T,P,V} <: OnlineStat{MarketDataPoint{T,P,V}}\n    price_resampler::AbstractResampler{T,P,V}\n    volume_resampler::AbstractResampler{T,P,V}\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Main composite resampler combining price and volume strategies.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Constructors:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Default types with price method selection\nMarketResampler(period::Period; price_method::Symbol = :ohlc, validate_chronological::Bool = false)\n\n# Explicit types with price method selection\nMarketResampler{T,P,V}(period::Period; price_method::Symbol = :ohlc, validate_chronological::Bool = false)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Parameters:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"period: Time period for resampling (e.g., Minute(1), Second(30))\nprice_method: Either :ohlc or :mean\nvalidate_chronological: If true, validates that data points arrive in chronological order and throws ArgumentError for out-of-order data","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Return Value: When calling value(resampler):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    price = price_resampler_result,  # OHLC or Mean result\n    volume = volume_sum,             # Total volume\n    window = current_time_window     # TimeWindow\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# OHLC resampler (default)\nohlc_resampler = MarketResampler(Minute(1))\n\n# Mean price resampler\nmean_resampler = MarketResampler(Minute(5), price_method=:mean)\n\n# High-precision resampler\nusing FixedPointDecimals\nprecision_resampler = MarketResampler{DateTime, FixedDecimal{Int64,4}, FixedDecimal{Int64,2}}(\n    Minute(1), price_method=:ohlc\n)\n\n# Chronological validation enabled\nvalidated_resampler = MarketResampler(Minute(1), validate_chronological=true)\nfit!(validated_resampler, MarketDataPoint(DateTime(2024,1,1,9,30,0), 100.0, 1000.0))\n# This will throw ArgumentError due to out-of-order timestamp\n# fit!(validated_resampler, MarketDataPoint(DateTime(2024,1,1,9,29,0), 99.0, 800.0))","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#OHLCResampler","page":"API Reference","title":"OHLCResampler","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"mutable struct OHLCResampler{T,P,V} <: AbstractResampler{T,P,V}\n    period::Period\n    current_window::Union{TimeWindow{T}, Nothing}\n    ohlc::Union{OHLC{P}, Nothing}\n    volume_sum::V\n    count::Int\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Resampler that aggregates data into OHLC format.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Constructors:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Default types\nOHLCResampler(period::Period; validate_chronological::Bool = false)\n\n# Explicit types\nOHLCResampler{T,P,V}(period::Period; validate_chronological::Bool = false)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Return Value: When calling value(resampler):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    ohlc = OHLC{P}(...) | nothing,  # OHLC structure or nothing if no data\n    volume = volume_sum,             # Total volume in current window\n    window = current_window          # Current TimeWindow\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = OHLCResampler(Minute(1))\nfit!(resampler, MarketDataPoint(now(), 100.0, 1000.0))\nresult = value(resampler)\nprintln(result.ohlc)  # OHLC(100.0, 100.0, 100.0, 100.0)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#MeanResampler","page":"API Reference","title":"MeanResampler","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"mutable struct MeanResampler{T,P,V} <: AbstractResampler{T,P,V}\n    period::Period\n    current_window::Union{TimeWindow{T}, Nothing}\n    price_sum::P\n    volume_sum::V\n    count::Int\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Resampler that calculates mean prices over time periods.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Constructors:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Default types\nMeanResampler(period::Period; validate_chronological::Bool = false)\n\n# Explicit types\nMeanResampler{T,P,V}(period::Period; validate_chronological::Bool = false)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Return Value: When calling value(resampler):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    mean_price = price_sum / count,  # Average price in window\n    volume = volume_sum,             # Total volume in current window\n    window = current_window          # Current TimeWindow\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = MeanResampler(Minute(5))\nfit!(resampler, MarketDataPoint(now(), 100.0, 1000.0))\nfit!(resampler, MarketDataPoint(now(), 110.0, 500.0))\nresult = value(resampler)\nprintln(result.mean_price)  # 105.0","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#SumResampler","page":"API Reference","title":"SumResampler","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"mutable struct SumResampler{T,P,V} <: AbstractResampler{T,P,V}\n    period::Period\n    current_window::Union{TimeWindow{T}, Nothing}\n    sum::V\n    count::Int\nend","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Resampler that sums values over time periods (typically used for volumes).","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Constructors:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Default types\nSumResampler(period::Period; validate_chronological::Bool = false)\n\n# Explicit types\nSumResampler{T,P,V}(period::Period; validate_chronological::Bool = false)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Return Value: When calling value(resampler):","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    sum = accumulated_sum,    # Sum of values in current window\n    window = current_window   # Current TimeWindow\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = SumResampler(Minute(1))\nfit!(resampler, MarketDataPoint(now(), 100.0, 1000.0))  # Uses volume\nfit!(resampler, MarketDataPoint(now(), 105.0, 500.0))   # Uses volume\nresult = value(resampler)\nprintln(result.sum)  # 1500.0","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"api_reference/#OnlineStatsBase-Interface","page":"API Reference","title":"OnlineStatsBase Interface","text":"","category":"section"},{"location":"api_reference/#fit!(resampler,-data)","page":"API Reference","title":"fit!(resampler, data)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"fit!(resampler::AbstractResampler, data::MarketDataPoint)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Process a new market data point through the resampler.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler: Any resampler instance\ndata: MarketDataPoint with compatible types","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: The resampler instance (for chaining)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Side Effects: Updates internal state; may trigger window transitions","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = MarketResampler(Minute(1))\ndata = MarketDataPoint(DateTime(2024,1,1,9,30,0), 100.0, 1000.0)\nfit!(resampler, data)\n\n# Chaining\nfit!(fit!(resampler, data1), data2)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#value(resampler)","page":"API Reference","title":"value(resampler)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"value(resampler::AbstractResampler)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Extract current aggregated values from the resampler.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler: Any resampler instance","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: Named tuple with resampler-specific structure (see individual resampler documentation)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = OHLCResampler(Minute(1))\n# ... fit data ...\nresult = value(resampler)\nprintln(\"OHLC: $(result.ohlc)\")\nprintln(\"Volume: $(result.volume)\")","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#nobs(resampler)","page":"API Reference","title":"nobs(resampler)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"nobs(resampler::AbstractResampler) -> Int","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Get the number of observations processed in the current time window.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler: Any resampler instance","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: Integer count of data points in current window","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"resampler = MarketResampler(Minute(1))\nprintln(\"Initial count: $(nobs(resampler))\")  # 0\nfit!(resampler, data)\nprintln(\"After data: $(nobs(resampler))\")     # 1","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#merge!(r1,-r2)","page":"API Reference","title":"merge!(r1, r2)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"merge!(r1::T, r2::T) where T <: AbstractResampler","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Merge two resamplers of the same type for parallel processing.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"r1: Target resampler (will be modified)\nr2: Source resampler (will be consumed)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: Modified r1 containing combined results","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Requirements: Both resamplers must have compatible types and time windows","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"# Parallel processing example\nr1 = OHLCResampler(Minute(1))\nr2 = OHLCResampler(Minute(1))\n\n# Process different data chunks\nfit!(r1, data_chunk_1...)\nfit!(r2, data_chunk_2...)\n\n# Combine results\nmerge!(r1, r2)\ncombined_result = value(r1)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Utility-Functions","page":"API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"api_reference/#window_end(window)","page":"API Reference","title":"window_end(window)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"window_end(window::TimeWindow{T}) -> T","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Calculate the end time of a time window.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"window: TimeWindow instance","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: End timestamp (start_time + period)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"window = TimeWindow{DateTime}(DateTime(2024,1,1,9,30,0), Minute(1))\nend_time = window_end(window)  # DateTime(2024,1,1,9,31,0)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#belongs*to*window(datetime,-window)","page":"API Reference","title":"belongstowindow(datetime, window)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"belongs_to_window(datetime::T, window::TimeWindow{T}) -> Bool","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Check if a timestamp falls within a time window.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"datetime: Timestamp to check\nwindow: TimeWindow to check against","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: true if timestamp is in [starttime, endtime), false otherwise","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Note: Window is inclusive of start time, exclusive of end time","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"window = TimeWindow{DateTime}(DateTime(2024,1,1,9,30,0), Minute(1))\nbelongs_to_window(DateTime(2024,1,1,9,30,30), window)  # true\nbelongs_to_window(DateTime(2024,1,1,9,31,0), window)   # false (next window)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#next_window(window)","page":"API Reference","title":"next_window(window)","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"next_window(window::TimeWindow{T}) -> TimeWindow{T}","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Description: Create the next consecutive time window.","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arguments:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"window: Current time window","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Returns: New TimeWindow starting at current window's end time","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"current = TimeWindow{DateTime}(DateTime(2024,1,1,9,30,0), Minute(1))\nnext = next_window(current)\n# next.start_time == DateTime(2024,1,1,9,31,0)\n# next.period == Minute(1)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Type-Constructors","page":"API Reference","title":"Type Constructors","text":"","category":"section"},{"location":"api_reference/#Default-Type-Constructors","page":"API Reference","title":"Default Type Constructors","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"These constructors use DateTime, Float64, Float64 as default types:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"MarketResampler(period::Period; price_method=:ohlc, validate_chronological=false)\nOHLCResampler(period::Period; validate_chronological=false)\nMeanResampler(period::Period; validate_chronological=false)\nSumResampler(period::Period; validate_chronological=false)\nMarketDataPoint(datetime::DateTime, price::Real, volume::Real)","category":"page"},{"location":"api_reference/#Explicit-Type-Constructors","page":"API Reference","title":"Explicit Type Constructors","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"For custom numeric types or high-precision applications:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"MarketResampler{T,P,V}(period::Period; price_method=:ohlc, validate_chronological=false)\nOHLCResampler{T,P,V}(period::Period; validate_chronological=false)\nMeanResampler{T,P,V}(period::Period; validate_chronological=false)\nSumResampler{T,P,V}(period::Period; validate_chronological=false)\nMarketDataPoint{T,P,V}(datetime::T, price::P, volume::V)\nOHLC{P}(open::P, high::P, low::P, close::P)\nTimeWindow{T}(start_time::T, period::Period)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Return-Values","page":"API Reference","title":"Return Values","text":"","category":"section"},{"location":"api_reference/#MarketResampler-value()-Return","page":"API Reference","title":"MarketResampler value() Return","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    price = (\n        ohlc = OHLC{P}(...) | nothing,     # If using :ohlc method\n        # OR\n        mean_price = P(...),               # If using :mean method\n        volume = V(...),                   # Volume from price resampler\n        window = TimeWindow{T}(...)        # Current window\n    ),\n    volume = V(...),                       # Total volume (same as price.volume)\n    window = TimeWindow{T}(...)            # Current window (same as price.window)\n)","category":"page"},{"location":"api_reference/#OHLCResampler-value()-Return","page":"API Reference","title":"OHLCResampler value() Return","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    ohlc = OHLC{P}(...) | nothing,    # OHLC data or nothing if no data yet\n    volume = V(...),                  # Accumulated volume in current window\n    window = TimeWindow{T}(...) | nothing  # Current window or nothing if no data yet\n)","category":"page"},{"location":"api_reference/#MeanResampler-value()-Return","page":"API Reference","title":"MeanResampler value() Return","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    mean_price = P(...),              # Average price in current window\n    volume = V(...),                  # Accumulated volume in current window\n    window = TimeWindow{T}(...) | nothing  # Current window or nothing if no data yet\n)","category":"page"},{"location":"api_reference/#SumResampler-value()-Return","page":"API Reference","title":"SumResampler value() Return","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"(\n    sum = V(...),                     # Sum of values in current window\n    window = TimeWindow{T}(...) | nothing  # Current window or nothing if no data yet\n)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Type-Compatibility","page":"API Reference","title":"Type Compatibility","text":"","category":"section"},{"location":"api_reference/#Supported-Period-Types","page":"API Reference","title":"Supported Period Types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"All Julia Dates.Period subtypes are supported:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Nanosecond, Microsecond, Millisecond\nSecond, Minute, Hour\nDay, Week, Month, Year","category":"page"},{"location":"api_reference/#Supported-Timestamp-Types","page":"API Reference","title":"Supported Timestamp Types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Any type T that supports:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Arithmetic with Period types (T + Period -> T)\nComparison operations (<, <=, ==, >=, >)\nfloor(datetime::T, period::Period) -> T","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Common examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"DateTime (from Dates.jl)\nNanoDate (from NanoDates.jl)\nZonedDateTime (from TimeZones.jl)","category":"page"},{"location":"api_reference/#Supported-Numeric-Types","page":"API Reference","title":"Supported Numeric Types","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Any numeric type that supports:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"zero(Type) and one(Type) for initialization\nBasic arithmetic (+, -, *, /)\nComparison operations (<, >, min, max)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Common examples:","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Float64, Float32, BigFloat\nFixedDecimal{T,N} (from FixedPointDecimals.jl)\nRational{T} (built-in Julia type)\nInt64, Int32, BigInt (for volumes)","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Performance-Notes","page":"API Reference","title":"Performance Notes","text":"","category":"section"},{"location":"api_reference/#Memory-Complexity","page":"API Reference","title":"Memory Complexity","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Space: O(1) - Constant memory usage regardless of data volume\nAllocations: Zero allocations in steady-state processing","category":"page"},{"location":"api_reference/#Time-Complexity","page":"API Reference","title":"Time Complexity","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"fit!(): O(1) - Constant time per operation\nvalue(): O(1) - Constant time access\nmerge!(): O(1) - Constant time merge operation","category":"page"},{"location":"api_reference/#Type-Stability","page":"API Reference","title":"Type Stability","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"All operations are type-stable when using concrete types, enabling Julia's compiler optimizations.","category":"page"},{"location":"api_reference/#SIMD-Optimization","page":"API Reference","title":"SIMD Optimization","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Numeric operations automatically leverage Julia's SIMD capabilities when using appropriate numeric types.","category":"page"},{"location":"edge_cases/#Edge-Cases-and-Limitations","page":"Edge Cases & Limitations","title":"Edge Cases and Limitations","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"This document covers important edge cases, limitations, and unexpected behaviors when using OnlineResamplers.jl.","category":"page"},{"location":"edge_cases/#Table-of-Contents","page":"Edge Cases & Limitations","title":"Table of Contents","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"Out-of-Order Data\nEmpty Windows\nSingle Data Points\nType Mismatches\nVery Large Time Gaps\nPrecision Issues\nMemory Considerations","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Out-of-Order-Data","page":"Edge Cases & Limitations","title":"Out-of-Order Data","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"⚠️ CRITICAL BEHAVIOR: OnlineResamplers is designed for streaming data and assumes chronological order. Out-of-order data can cause unexpected behavior.","category":"page"},{"location":"edge_cases/#The-Problem","page":"Edge Cases & Limitations","title":"The Problem","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"When data points arrive out of chronological order, OnlineResamplers will:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"Always move to the new data's time window\nFinalize and lose all data from the previous window\nReset counters and aggregations for the new window","category":"page"},{"location":"edge_cases/#Example-of-the-Issue","page":"Edge Cases & Limitations","title":"Example of the Issue","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"using OnlineResamplers, OnlineStatsBase, Dates\n\nresampler = MarketResampler(Minute(1))\n\n# Process some data in window 1 (9:30-9:31)\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 105.0, 800.0))\n\n# Move to window 2 (9:31-9:32)\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 31, 0), 102.0, 1200.0))\n\nresult_before = value(resampler)\nprintln(\"Before: $(result_before.price.ohlc)\")  # OHLC(102.0, 102.0, 102.0, 102.0)\nprintln(\"Window: $(result_before.window.start_time)\")  # 2024-01-01T09:31:00\n\n# Now process OUT-OF-ORDER data from window 1\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 45), 95.0, 1500.0))\n\nresult_after = value(resampler)\nprintln(\"After: $(result_after.price.ohlc)\")   # OHLC(95.0, 95.0, 95.0, 95.0)\nprintln(\"Window: $(result_after.window.start_time)\")   # 2024-01-01T09:30:00\n\n# 🚨 ALL DATA FROM THE 9:31 WINDOW IS LOST!\n# 🚨 The resampler moved back to the 9:30 window and reset everything!","category":"page"},{"location":"edge_cases/#Scenarios-and-Behaviors","page":"Edge Cases & Limitations","title":"Scenarios and Behaviors","text":"","category":"section"},{"location":"edge_cases/#1.-Within-Same-Window-(Usually-OK)","page":"Edge Cases & Limitations","title":"1. Within Same Window (Usually OK)","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"resampler = MarketResampler(Minute(1))\n\n# Data arrives out of order but within same 1-minute window\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))   # First\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 45), 105.0, 800.0))   # Last chronologically\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 15), 95.0, 1200.0))   # Middle chronologically\n\nresult = value(resampler)\n# ✅ All data is preserved in OHLC\n# ❌ But Open=100.0 (first processed) and Close=95.0 (last processed)\n# ❌ Close is NOT the chronologically last price (105.0)!","category":"page"},{"location":"edge_cases/#2.-Across-Windows-(Always-Problematic)","page":"Edge Cases & Limitations","title":"2. Across Windows (Always Problematic)","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"resampler = MarketResampler(Minute(1))\n\n# Process data in sequence: 9:30 → 9:32 → 9:31 → 9:30\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))  # Window 1\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 32, 0), 110.0, 1500.0))  # Window 3\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 31, 0), 105.0, 800.0))   # Window 2\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 95.0, 1200.0))  # Back to Window 1\n\n# 🚨 Only the last window (9:30) has data\n# 🚨 All data from windows 9:32 and 9:31 is lost","category":"page"},{"location":"edge_cases/#Solutions","page":"Edge Cases & Limitations","title":"Solutions","text":"","category":"section"},{"location":"edge_cases/#Solution-1:-Pre-sort-Data","page":"Edge Cases & Limitations","title":"Solution 1: Pre-sort Data","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# Always sort your data before processing\nunsorted_data = [\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 45), 105.0, 800.0),\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0),\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 102.0, 1200.0),\n]\n\n# Sort by timestamp\nsorted_data = sort(unsorted_data, by=x -> x.datetime)\n\nresampler = MarketResampler(Minute(1))\nfor data in sorted_data\n    fit!(resampler, data)\nend\n\nresult = value(resampler)\n# ✅ Correct OHLC with proper chronological order","category":"page"},{"location":"edge_cases/#Solution-2:-Batch-Processing-by-Windows","page":"Edge Cases & Limitations","title":"Solution 2: Batch Processing by Windows","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function batch_process_by_windows(data_points, period)\n    # Group data by time windows\n    windows = Dict{DateTime, Vector{MarketDataPoint}}()\n\n    for data in data_points\n        window_start = floor(data.datetime, period)\n        if !haskey(windows, window_start)\n            windows[window_start] = MarketDataPoint[]\n        end\n        push!(windows[window_start], data)\n    end\n\n    # Process each window with sorted data\n    results = []\n    for window_start in sort(collect(keys(windows)))\n        window_data = windows[window_start]\n        sorted_window_data = sort(window_data, by=x -> x.datetime)\n\n        window_resampler = MarketResampler(period)\n        for data in sorted_window_data\n            fit!(window_resampler, data)\n        end\n\n        result = value(window_resampler)\n        if result.price.ohlc !== nothing\n            push!(results, (\n                window_start = window_start,\n                ohlc = result.price.ohlc,\n                volume = result.volume\n            ))\n        end\n    end\n\n    return results\nend\n\n# Usage\nmixed_data = [/* your out-of-order data */]\nresults = batch_process_by_windows(mixed_data, Minute(1))","category":"page"},{"location":"edge_cases/#Solution-3:-Built-in-Chronological-Validation","page":"Edge Cases & Limitations","title":"Solution 3: Built-in Chronological Validation","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"OnlineResamplers.jl now includes built-in validation to detect and prevent out-of-order data:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# Enable chronological validation\nresampler = MarketResampler(Minute(1), validate_chronological=true)\n\n# Process data normally\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 105.0, 800.0))\n\n# This will throw an ArgumentError with detailed message\ntry\n    fit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 15), 95.0, 1200.0))\ncatch e\n    println(\"Error: $(e.msg)\")\n    # Error: Data not in chronological order: 2024-01-01T09:30:15 < 2024-01-01T09:30:30.\n    # Received data point with timestamp 2024-01-01T09:30:15 but last processed timestamp was 2024-01-01T09:30:30.\n    # To disable this check, set validate_chronological=false in the constructor.\nend","category":"page"},{"location":"edge_cases/#Solution-4:-Manual-Validation","page":"Edge Cases & Limitations","title":"Solution 4: Manual Validation","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"For cases where you want to validate before processing:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function validate_chronological_order(data_points)\n    for i in 2:length(data_points)\n        if data_points[i].datetime < data_points[i-1].datetime\n            @warn \"Out-of-order data at index $i: $(data_points[i].datetime) < $(data_points[i-1].datetime)\"\n            return false\n        end\n    end\n    return true\nend\n\n# Always validate before processing\nif !validate_chronological_order(your_data)\n    @error \"Data is not in chronological order. Consider sorting first.\"\nend","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Empty-Windows","page":"Edge Cases & Limitations","title":"Empty Windows","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"OnlineResamplers handles empty windows gracefully, but you need to be aware of the behavior.","category":"page"},{"location":"edge_cases/#Behavior","page":"Edge Cases & Limitations","title":"Behavior","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"resampler = MarketResampler(Minute(1))\n\n# No data processed yet\nresult = value(resampler)\nprintln(result.price.ohlc)  # nothing\nprintln(result.volume)      # 0.0\nprintln(result.window)      # nothing","category":"page"},{"location":"edge_cases/#After-Processing-Data","page":"Edge Cases & Limitations","title":"After Processing Data","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# Process one data point\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\n\nresult = value(resampler)\nprintln(result.price.ohlc)  # OHLC(100.0, 100.0, 100.0, 100.0)\nprintln(result.window)      # TimeWindow{DateTime}(DateTime(\"2024-01-01T09:30:00\"), Minute(1))","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Single-Data-Points","page":"Edge Cases & Limitations","title":"Single Data Points","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"When only one data point exists in a window:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"resampler = MarketResampler(Minute(1))\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\n\nresult = value(resampler)\nohlc = result.price.ohlc\n\n# All OHLC values are identical\n@assert ohlc.open == ohlc.high == ohlc.low == ohlc.close == 100.0","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"This is correct behavior - with only one price point, all OHLC values should be the same.","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Type-Mismatches","page":"Edge Cases & Limitations","title":"Type Mismatches","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"OnlineResamplers is strictly typed. Type mismatches will cause compile-time or runtime errors:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# This will fail\nresampler = MarketResampler{DateTime, Float64, Float64}(Minute(1))\nbad_data = MarketDataPoint{DateTime, Int64, Float64}(DateTime(2024, 1, 1, 9, 30, 0), 100, 1000.0)\n\n# fit!(resampler, bad_data)  # MethodError: no method matching\n\n# Solution: Ensure consistent types\ngood_data = MarketDataPoint{DateTime, Float64, Float64}(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0)\nfit!(resampler, good_data)  # Works","category":"page"},{"location":"edge_cases/#Type-Conversion-Helper","page":"Edge Cases & Limitations","title":"Type Conversion Helper","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function convert_market_data(data::MarketDataPoint, ::Type{T}, ::Type{P}, ::Type{V}) where {T,P,V}\n    return MarketDataPoint{T,P,V}(\n        T(data.datetime),\n        P(data.price),\n        V(data.volume)\n    )\nend\n\n# Usage\noriginal = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100, 1000)  # Int types\nconverted = convert_market_data(original, DateTime, Float64, Float64)","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Very-Large-Time-Gaps","page":"Edge Cases & Limitations","title":"Very Large Time Gaps","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"OnlineResamplers handles arbitrary time gaps, but be aware of implications:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"resampler = MarketResampler(Minute(1))\n\n# Process data at 9:30\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\n\n# Process data much later (hours later)\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 15, 30, 0), 200.0, 2000.0))\n\n# The resampler immediately moves to the 15:30 window\n# All intermediate windows (9:31, 9:32, ..., 15:29) are never created\nresult = value(resampler)\nprintln(result.window.start_time)  # 2024-01-01T15:30:00","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"This is expected behavior - OnlineResamplers doesn't create empty intermediate windows.","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Precision-Issues","page":"Edge Cases & Limitations","title":"Precision Issues","text":"","category":"section"},{"location":"edge_cases/#With-Floating-Point-Types","page":"Edge Cases & Limitations","title":"With Floating Point Types","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# Floating point precision can affect comparisons\nresampler = MarketResampler(Microsecond(1))\n\ndt1 = DateTime(2024, 1, 1, 9, 30, 0) + Nanosecond(100)  # Not exactly representable\ndt2 = DateTime(2024, 1, 1, 9, 30, 0) + Nanosecond(200)\n\n# These might end up in the same microsecond window due to precision","category":"page"},{"location":"edge_cases/#Solution:-Use-Appropriate-Precision","page":"Edge Cases & Limitations","title":"Solution: Use Appropriate Precision","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"using FixedPointDecimals\n\n# For high-precision financial data\nPreciseResampler = MarketResampler{DateTime, FixedDecimal{Int64,4}, FixedDecimal{Int64,2}}\nprecise_resampler = PreciseResampler(Minute(1))\n\nprecise_data = MarketDataPoint{DateTime, FixedDecimal{Int64,4}, FixedDecimal{Int64,2}}(\n    DateTime(2024, 1, 1, 9, 30, 0),\n    FixedDecimal{Int64,4}(100.1234),  # Exactly representable\n    FixedDecimal{Int64,2}(1000.50)    # Exactly representable\n)\n\nfit!(precise_resampler, precise_data)","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Memory-Considerations","page":"Edge Cases & Limitations","title":"Memory Considerations","text":"","category":"section"},{"location":"edge_cases/#Normal-Operation-(Constant-Memory)","page":"Edge Cases & Limitations","title":"Normal Operation (Constant Memory)","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# Memory usage stays constant regardless of data volume\nresampler = MarketResampler(Minute(1))\n\nfor i in 1:1_000_000\n    timestamp = DateTime(2024, 1, 1, 9, 0, 0) + Millisecond(i)\n    data = MarketDataPoint(timestamp, 100.0, 1000.0)\n    fit!(resampler, data)\nend\n\n# Memory usage is O(1) - constant","category":"page"},{"location":"edge_cases/#Potential-Memory-Issues","page":"Edge Cases & Limitations","title":"Potential Memory Issues","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"# DON'T store all intermediate results\nresults = []  # This will grow without bound!\nresampler = MarketResampler(Minute(1))\n\nfor data in huge_dataset\n    fit!(resampler, data)\n    push!(results, value(resampler))  # ❌ This defeats the purpose!\nend","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"Instead, only store completed windows:","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"completed_bars = []\nresampler = MarketResampler(Minute(1))\ncurrent_window = nothing\n\nfor data in huge_dataset\n    old_result = value(resampler)\n    old_window = old_result.window\n\n    fit!(resampler, data)\n\n    new_result = value(resampler)\n    if new_result.window != old_window && old_window !== nothing\n        # Window completed, save it\n        push!(completed_bars, (\n            timestamp = old_window.start_time,\n            ohlc = old_result.price.ohlc,\n            volume = old_result.volume\n        ))\n    end\nend","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/#Best-Practices-for-Edge-Cases","page":"Edge Cases & Limitations","title":"Best Practices for Edge Cases","text":"","category":"section"},{"location":"edge_cases/#1.-Always-Validate-Input-Data","page":"Edge Cases & Limitations","title":"1. Always Validate Input Data","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function validate_market_data(data::MarketDataPoint)\n    if data.price <= 0\n        throw(ArgumentError(\"Price must be positive: $(data.price)\"))\n    end\n    if data.volume < 0\n        throw(ArgumentError(\"Volume cannot be negative: $(data.volume)\"))\n    end\n    return true\nend","category":"page"},{"location":"edge_cases/#2.-Sort-Before-Processing","page":"Edge Cases & Limitations","title":"2. Sort Before Processing","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function safe_resample(data_points, period; price_method=:ohlc)\n    # Always sort first\n    sorted_data = sort(data_points, by=x -> x.datetime)\n\n    resampler = MarketResampler(period, price_method=price_method)\n    for data in sorted_data\n        validate_market_data(data)\n        fit!(resampler, data)\n    end\n\n    return value(resampler)\nend","category":"page"},{"location":"edge_cases/#3.-Handle-Empty-Results","page":"Edge Cases & Limitations","title":"3. Handle Empty Results","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function safe_get_ohlc(resampler)\n    result = value(resampler)\n    if result.price.ohlc === nothing\n        @warn \"No OHLC data available - no data points processed yet\"\n        return nothing\n    end\n    return result.price.ohlc\nend","category":"page"},{"location":"edge_cases/#4.-Monitor-Window-Transitions","page":"Edge Cases & Limitations","title":"4. Monitor Window Transitions","text":"","category":"section"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"function process_with_monitoring(resampler, data_stream)\n    window_count = 0\n    current_window = nothing\n\n    for data in data_stream\n        old_result = value(resampler)\n        old_window = old_result.window\n\n        fit!(resampler, data)\n\n        new_result = value(resampler)\n        if new_result.window != old_window\n            window_count += 1\n            @info \"Window transition #$window_count: $(old_window) → $(new_result.window)\"\n        end\n    end\n\n    return window_count\nend","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"","category":"page"},{"location":"edge_cases/","page":"Edge Cases & Limitations","title":"Edge Cases & Limitations","text":"These edge cases and limitations are important to understand when using OnlineResamplers.jl in production. The package is designed for streaming, chronologically-ordered data, and understanding these constraints will help you use it effectively.","category":"page"},{"location":"user_guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"This comprehensive guide covers all aspects of using OnlineResamplers.jl for financial market data processing.","category":"page"},{"location":"user_guide/#Table-of-Contents","page":"User Guide","title":"Table of Contents","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Installation\nCore Concepts\nBasic Usage\nAdvanced Features\nReal-World Examples\nPerformance Optimization\nIntegration with OnlineStats\nTroubleshooting","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Installation","page":"User Guide","title":"Installation","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using Pkg\nPkg.add(url=\"https://github.com/femtotrader/OnlineResamplers.jl\")","category":"page"},{"location":"user_guide/#Development-Installation","page":"User Guide","title":"Development Installation","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using Pkg\nPkg.develop(url=\"https://github.com/femtotrader/OnlineResamplers.jl\")\nPkg.test(\"OnlineResamplers\")","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Core-Concepts","page":"User Guide","title":"Core Concepts","text":"","category":"section"},{"location":"user_guide/#Market-Data-Structure","page":"User Guide","title":"Market Data Structure","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Market data is represented using the MarketDataPoint{T,P,V} structure, which provides type safety and flexibility:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using OnlineResamplers, Dates\n\n# Basic usage with default types (DateTime, Float64, Float64)\ndata = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.50, 1000.0)\n\n# Explicit type construction\ndata_explicit = MarketDataPoint{DateTime, Float64, Float64}(\n    DateTime(2024, 1, 1, 9, 30, 0),\n    100.50,\n    1000.0\n)\n\n# Custom types for high precision\nusing FixedPointDecimals\nprecise_data = MarketDataPoint{DateTime, FixedDecimal{Int64,4}, FixedDecimal{Int64,2}}(\n    DateTime(2024, 1, 1, 9, 30, 0),\n    FixedDecimal{Int64,4}(100.5012),\n    FixedDecimal{Int64,2}(1000.50)\n)","category":"page"},{"location":"user_guide/#Time-Windows","page":"User Guide","title":"Time Windows","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Data is aggregated into time windows defined by start time and period. Understanding time windows is crucial for effective resampling:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using Dates\n\n# Create a 5-minute window\nwindow = TimeWindow{DateTime}(DateTime(2024, 1, 1, 9, 30, 0), Minute(5))\n\n# The window includes data from [start_time, start_time + period)\nprintln(\"Window start: $(window.start_time)\")      # 2024-01-01T09:30:00\nprintln(\"Window end: $(window_end(window))\")       # 2024-01-01T09:35:00\n\n# Check if timestamps belong to window\ntest_times = [\n    DateTime(2024, 1, 1, 9, 29, 59),  # Before window -> false\n    DateTime(2024, 1, 1, 9, 30, 0),   # Start of window -> true\n    DateTime(2024, 1, 1, 9, 32, 30),  # Middle of window -> true\n    DateTime(2024, 1, 1, 9, 35, 0)    # Next window -> false\n]\n\nfor ts in test_times\n    belongs = belongs_to_window(ts, window)\n    println(\"$(ts): $(belongs)\")\nend","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Basic-Usage","page":"User Guide","title":"Basic Usage","text":"","category":"section"},{"location":"user_guide/#OHLC-Resampling","page":"User Guide","title":"OHLC Resampling","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"OHLC (Open, High, Low, Close) resampling is perfect for candlestick charts and technical analysis:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using OnlineResamplers, OnlineStatsBase, Dates\n\n# Create OHLC resampler (this is the default)\nohlc_resampler = MarketResampler(Minute(1), price_method=:ohlc)\n\n# Sample market data within one minute\nbase_time = DateTime(2024, 1, 1, 14, 30, 0)\nmarket_data = [\n    MarketDataPoint(base_time + Second(0), 100.00, 1000.0),   # Open\n    MarketDataPoint(base_time + Second(15), 102.50, 800.0),   # High point\n    MarketDataPoint(base_time + Second(30), 97.75, 1200.0),   # Low point\n    MarketDataPoint(base_time + Second(45), 101.25, 900.0)    # Close\n]\n\n# Process all data points\nfor data in market_data\n    fit!(ohlc_resampler, data)\nend\n\n# Extract results\nresult = value(ohlc_resampler)\nohlc = result.price.ohlc\n\nprintln(\"Open:  $(ohlc.open)\")     # 100.00 (first price)\nprintln(\"High:  $(ohlc.high)\")     # 102.50 (highest price)\nprintln(\"Low:   $(ohlc.low)\")      # 97.75  (lowest price)\nprintln(\"Close: $(ohlc.close)\")    # 101.25 (last price)\nprintln(\"Volume: $(result.volume)\") # 3900.0 (total volume)","category":"page"},{"location":"user_guide/#Mean-Price-Resampling","page":"User Guide","title":"Mean Price Resampling","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"For applications requiring smoothed price data or when you need average prices over time intervals:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Create mean price resampler\nmean_resampler = MarketResampler(Minute(5), price_method=:mean)\n\n# Process the same data\nfor data in market_data\n    fit!(mean_resampler, data)\nend\n\nresult = value(mean_resampler)\nmean_price = result.price.mean_price\n\nprintln(\"Mean Price: $(mean_price)\")  # 100.375 ((100+102.5+97.75+101.25)/4)\nprintln(\"Volume: $(result.volume)\")   # 3900.0","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Advanced-Features","page":"User Guide","title":"Advanced Features","text":"","category":"section"},{"location":"user_guide/#Custom-Numeric-Types","page":"User Guide","title":"Custom Numeric Types","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"OnlineResamplers fully supports custom numeric types commonly used in financial applications:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using FixedPointDecimals, NanoDates\n\n# Define high-precision types\nPriceType = FixedDecimal{Int128, 8}    # 8 decimal places for prices\nVolumeType = FixedDecimal{Int64, 2}    # 2 decimal places for volumes\n\n# Create high-precision resampler\nprecision_resampler = MarketResampler{NanoDate, PriceType, VolumeType}(\n    Nanosecond(1_000_000_000),  # 1 second intervals\n    price_method=:ohlc\n)\n\n# Create high-precision market data\nnano_data = MarketDataPoint{NanoDate, PriceType, VolumeType}(\n    NanoDate(2024, 1, 1, 9, 30, 0, 123456789),\n    PriceType(100.12345678),\n    VolumeType(1000.50)\n)\n\nfit!(precision_resampler, nano_data)\nresult = value(precision_resampler)\n\nprintln(\"High-precision OHLC: $(result.price.ohlc)\")\nprintln(\"High-precision Volume: $(result.volume)\")","category":"page"},{"location":"user_guide/#Parallel-Processing","page":"User Guide","title":"Parallel Processing","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"OnlineResamplers supports efficient merging for parallel data processing:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Function to process a chunk of data\nfunction process_chunk(data_chunk::Vector, period::Period)\n    chunk_resampler = OHLCResampler{DateTime, Float64, Float64}(period)\n    for data in data_chunk\n        fit!(chunk_resampler, data)\n    end\n    return chunk_resampler\nend\n\n# Generate large dataset\nlarge_dataset = [\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 0, i), 100.0 + sin(i/100), rand(500:1500))\n    for i in 1:10000\n]\n\n# Split into chunks for parallel processing\nchunk_size = 2500\nchunks = [large_dataset[i:min(i+chunk_size-1, end)] for i in 1:chunk_size:length(large_dataset)]\n\n# Process chunks (in real applications, use @distributed or threading)\nchunk_resamplers = [process_chunk(chunk, Minute(1)) for chunk in chunks]\n\n# Merge all results\nfinal_resampler = chunk_resamplers[1]\nfor i in 2:length(chunk_resamplers)\n    merge!(final_resampler, chunk_resamplers[i])\nend\n\nmerged_result = value(final_resampler)\nprintln(\"Merged OHLC: $(merged_result.ohlc)\")\nprintln(\"Total observations: $(nobs(final_resampler))\")","category":"page"},{"location":"user_guide/#Individual-Resamplers","page":"User Guide","title":"Individual Resamplers","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"For specialized use cases, you can use individual resampler types directly:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Pure OHLC resampler\nohlc_only = OHLCResampler{DateTime, Float64, Float64}(Minute(1))\n\n# Mean price resampler\nmean_only = MeanResampler{DateTime, Float64, Float64}(Minute(5))\n\n# Sum resampler (for volume or other additive metrics)\nvolume_sum = SumResampler{DateTime, Float64, Float64}(Second(30))\n\n# Process sample data\nsample_data = MarketDataPoint(DateTime(2024, 1, 1, 10, 0, 0), 100.0, 1000.0)\n\nfit!(ohlc_only, sample_data)\nfit!(mean_only, sample_data)\nfit!(volume_sum, sample_data)\n\n# Get individual results\nohlc_result = value(ohlc_only)\nmean_result = value(mean_only)\nvolume_result = value(volume_sum)\n\nprintln(\"OHLC only: $(ohlc_result)\")\nprintln(\"Mean only: $(mean_result)\")\nprintln(\"Volume sum: $(volume_result)\")","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Real-World-Examples","page":"User Guide","title":"Real-World Examples","text":"","category":"section"},{"location":"user_guide/#Processing-CSV-Market-Data","page":"User Guide","title":"Processing CSV Market Data","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Here's a complete example processing market data from a CSV file:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using OnlineResamplers, OnlineStatsBase, Dates, CSV, DataFrames\n\n# Load tick data from CSV file\ntick_data = CSV.read(\"market_ticks.csv\", DataFrame)\n\n# Create 1-minute OHLC resampler\nresampler = MarketResampler(Minute(1))\n\n# Storage for completed OHLC bars\nohlc_bars = []\ncurrent_window = nothing\n\n# Process each tick\nfor row in eachrow(tick_data)\n    # Create market data point\n    data_point = MarketDataPoint(\n        DateTime(row.timestamp),\n        row.price,\n        row.volume\n    )\n\n    # Get current window before processing\n    old_window = value(resampler).window\n\n    # Process the data\n    fit!(resampler, data_point)\n\n    # Check if we moved to a new window (completed a bar)\n    new_result = value(resampler)\n    if new_result.window != old_window && old_window !== nothing\n        # We completed a window, save the OHLC bar\n        old_result = # You'll need to store this before processing new data\n        push!(ohlc_bars, (\n            timestamp = old_window.start_time,\n            open = old_result.price.ohlc.open,\n            high = old_result.price.ohlc.high,\n            low = old_result.price.ohlc.low,\n            close = old_result.price.ohlc.close,\n            volume = old_result.volume\n        ))\n    end\nend\n\n# Convert to DataFrame for analysis\nohlc_df = DataFrame(ohlc_bars)\nprintln(\"Generated $(nrow(ohlc_df)) OHLC bars from $(nrow(tick_data)) ticks\")\n\n# Save results\nCSV.write(\"ohlc_1min.csv\", ohlc_df)","category":"page"},{"location":"user_guide/#Multi-timeframe-Analysis","page":"User Guide","title":"Multi-timeframe Analysis","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Analyze the same data stream across multiple timeframes simultaneously:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Create resamplers for different timeframes\ntimeframes = Dict(\n    \"1min\" => MarketResampler(Minute(1)),\n    \"5min\" => MarketResampler(Minute(5)),\n    \"15min\" => MarketResampler(Minute(15)),\n    \"1hour\" => MarketResampler(Hour(1))\n)\n\n# Generate sample data (simulating 1 hour of minute-level ticks)\nbase_time = DateTime(2024, 1, 1, 9, 0, 0)\nsample_ticks = []\n\nprice = 100.0\nfor i in 1:60  # 60 minutes\n    # Add some realistic price movement\n    price += randn() * 0.1  # Random walk\n    volume = rand(500:1500)\n    timestamp = base_time + Minute(i)\n\n    push!(sample_ticks, MarketDataPoint(timestamp, price, volume))\nend\n\n# Process through all timeframes\nfor tick in sample_ticks\n    for (name, resampler) in timeframes\n        fit!(resampler, tick)\n    end\nend\n\n# Display results\nprintln(\"Multi-timeframe Analysis:\")\nprintln(\"========================\")\nfor (name, resampler) in sort(collect(timeframes))\n    result = value(resampler)\n    if result.price.ohlc !== nothing\n        ohlc = result.price.ohlc\n        @printf(\"%-8s: O=%6.2f H=%6.2f L=%6.2f C=%6.2f Vol=%8.0f\\\\n\",\n                name, ohlc.open, ohlc.high, ohlc.low, ohlc.close, result.volume)\n    end\nend","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Performance-Optimization","page":"User Guide","title":"Performance Optimization","text":"","category":"section"},{"location":"user_guide/#Memory-Efficiency","page":"User Guide","title":"Memory Efficiency","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"OnlineResamplers uses constant memory regardless of data volume:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Memory usage stays constant even with millions of data points\nmemory_test_resampler = MarketResampler(Minute(1))\n\nprintln(\"Processing 1 million data points...\")\nfor i in 1:1_000_000\n    timestamp = DateTime(2024, 1, 1, 9, 0, 0) + Millisecond(i)\n    data = MarketDataPoint(timestamp, 100.0 + sin(i/1000), 1000.0)\n    fit!(memory_test_resampler, data)\n\n    # Memory usage remains constant due to automatic window transitions\nend\n\nresult = value(memory_test_resampler)\nprintln(\"Current window has $(nobs(memory_test_resampler)) observations\")\nprintln(\"Total memory usage is O(1) - constant regardless of data volume processed\")","category":"page"},{"location":"user_guide/#Type-Stability","page":"User Guide","title":"Type Stability","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"For maximum performance, use concrete types and avoid type instabilities:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Good: Concrete types enable compiler optimizations\nfunction high_performance_processing(\n    resampler::MarketResampler{DateTime, Float64, Float64},\n    data_stream::Vector{MarketDataPoint{DateTime, Float64, Float64}}\n)\n    for data in data_stream\n        fit!(resampler, data)\n    end\n    return value(resampler)\nend\n\n# Usage\nfast_resampler = MarketResampler{DateTime, Float64, Float64}(Minute(1))\ntyped_data = MarketDataPoint{DateTime, Float64, Float64}[]\n\n# This will be highly optimized by the Julia compiler\nresult = high_performance_processing(fast_resampler, typed_data)","category":"page"},{"location":"user_guide/#Batch-Processing","page":"User Guide","title":"Batch Processing","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Process data in batches for optimal performance:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"function batch_process_ticks(resampler, ticks::Vector)\n    # Process all ticks without intermediate value() calls\n    for tick in ticks\n        fit!(resampler, tick)\n    end\n\n    # Get result only once at the end\n    return value(resampler)\nend\n\n# This approach is faster than calling value() after each fit!()\nbatch_resampler = MarketResampler(Minute(1))\nbatch_ticks = [\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 30, i), 100.0 + randn(), 1000.0)\n    for i in 1:1000\n]\n\nresult = batch_process_ticks(batch_resampler, batch_ticks)","category":"page"},{"location":"user_guide/#Performance-Benchmarks","page":"User Guide","title":"Performance Benchmarks","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Here are typical performance characteristics:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using BenchmarkTools\n\n# Setup\nresampler = MarketResampler(Minute(1))\ndata = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0)\n\n# Single operation benchmark\n@benchmark fit!($resampler, $data)\n# Typical: ~50ns per operation\n\n# Batch processing benchmark\ndata_batch = [MarketDataPoint(DateTime(2024, 1, 1, 9, 30, i), rand(90:110), rand(500:1500)) for i in 1:10000]\nbatch_resampler = MarketResampler(Minute(1))\n\n@benchmark begin\n    for d in $data_batch\n        fit!($batch_resampler, d)\n    end\nend\n# Typical: ~500μs for 10,000 operations (~50ns per operation)","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Expected performance characteristics:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Single operation: ~50 nanoseconds\nMemory usage: O(1) constant\nThroughput: >2 million operations/second on modern hardware\nMemory allocations: Zero in steady state","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Integration-with-OnlineStats","page":"User Guide","title":"Integration with OnlineStats","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"OnlineResamplers seamlessly integrates with the broader OnlineStats ecosystem:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using OnlineStats\n\n# Combine market resampling with other online statistics\ncombined_stats = Group(\n    MarketResampler(Minute(1)),    # Market data resampling\n    Mean(),                        # Overall price mean\n    Variance(),                    # Price variance\n    CountMinSketch(String, 1000)   # Frequent symbols (if processing multiple assets)\n)\n\n# Generate sample data\ndata_stream = [\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 30, i), 100.0 + randn(), 1000.0)\n    for i in 1:1000\n]\n\n# Process all statistics simultaneously\nfor data in data_stream\n    # The Group expects a tuple matching all statistics\n    fit!(combined_stats, (data, data.price, data.price))\nend\n\n# Access individual statistics\nresampler_result = value(combined_stats[1])  # MarketResampler results\nmean_price = value(combined_stats[2])        # Mean price\nprice_variance = value(combined_stats[3])    # Price variance\n\nprintln(\"OHLC: $(resampler_result.price.ohlc)\")\nprintln(\"Mean price: $(mean_price)\")\nprintln(\"Price variance: $(price_variance)\")","category":"page"},{"location":"user_guide/#Custom-OnlineStats-Integration","page":"User Guide","title":"Custom OnlineStats Integration","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"You can also create custom statistics that work with market data:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using OnlineStatsBase\n\n# Custom statistic: Price range tracker\nmutable struct PriceRange <: OnlineStat{MarketDataPoint}\n    min_price::Float64\n    max_price::Float64\n    n::Int\n\n    PriceRange() = new(Inf, -Inf, 0)\nend\n\nfunction OnlineStatsBase._fit!(stat::PriceRange, data::MarketDataPoint)\n    stat.min_price = min(stat.min_price, data.price)\n    stat.max_price = max(stat.max_price, data.price)\n    stat.n += 1\n    return stat\nend\n\nfunction OnlineStatsBase.value(stat::PriceRange)\n    return (min=stat.min_price, max=stat.max_price, range=stat.max_price - stat.min_price)\nend\n\nOnlineStatsBase.nobs(stat::PriceRange) = stat.n\n\n# Usage\nprice_range = PriceRange()\nmarket_data = [MarketDataPoint(DateTime(2024, 1, 1, 9, 30, i), 100.0 + randn() * 5, 1000.0) for i in 1:100]\n\nfor data in market_data\n    fit!(price_range, data)\nend\n\nrange_result = value(price_range)\nprintln(\"Price range: $(range_result.min) to $(range_result.max)\")\nprintln(\"Total range: $(range_result.range)\")","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/#Troubleshooting","page":"User Guide","title":"Troubleshooting","text":"","category":"section"},{"location":"user_guide/#Common-Issues-and-Solutions","page":"User Guide","title":"Common Issues and Solutions","text":"","category":"section"},{"location":"user_guide/#Type-Mismatch-Errors","page":"User Guide","title":"Type Mismatch Errors","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Problem: Type mismatch\nresampler = MarketResampler{DateTime, Float64, Float64}(Minute(1))\nbad_data = MarketDataPoint{DateTime, Int64, Float64}(DateTime(2024, 1, 1, 9, 30, 0), 100, 1000.0)\n\n# This will fail:\n# fit!(resampler, bad_data)  # ERROR: MethodError\n\n# Solution: Ensure consistent types\ngood_data = MarketDataPoint{DateTime, Float64, Float64}(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0)\nfit!(resampler, good_data)  # Works fine","category":"page"},{"location":"user_guide/#Window-Alignment-Issues","page":"User Guide","title":"Window Alignment Issues","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Problem: Unexpected window boundaries\nresampler = MarketResampler(Minute(1))\n\n# Data that doesn't align with minute boundaries\nmisaligned_data = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 37), 100.0, 1000.0)\nfit!(resampler, misaligned_data)\n\nresult = value(resampler)\nprintln(\"Window starts at: $(result.window.start_time)\")  # 2024-01-01T09:30:00\n\n# Solution: Understand that windows are floor-aligned\n# The window will start at 9:30:00 even though data arrived at 9:30:37","category":"page"},{"location":"user_guide/#Memory-Issues-with-Large-Datasets","page":"User Guide","title":"Memory Issues with Large Datasets","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"# Problem: Processing very large datasets inefficiently\nfunction inefficient_processing(large_dataset)\n    results = []\n    resampler = MarketResampler(Minute(1))\n\n    for data in large_dataset\n        fit!(resampler, data)\n        push!(results, value(resampler))  # DON'T DO THIS - stores everything\n    end\n\n    return results\nend\n\n# Solution: Only store what you need\nfunction efficient_processing(large_dataset)\n    completed_bars = []\n    resampler = MarketResampler(Minute(1))\n    current_window = nothing\n\n    for data in large_dataset\n        old_result = value(resampler)\n        old_window = old_result.window\n\n        fit!(resampler, data)\n\n        new_result = value(resampler)\n        if new_result.window != old_window && old_window !== nothing\n            # Only store completed bars\n            push!(completed_bars, (\n                timestamp = old_window.start_time,\n                ohlc = old_result.price.ohlc,\n                volume = old_result.volume\n            ))\n        end\n    end\n\n    return completed_bars\nend","category":"page"},{"location":"user_guide/#Performance-Debugging","page":"User Guide","title":"Performance Debugging","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"If you're experiencing performance issues:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"using Profile\n\nfunction profile_resampling()\n    resampler = MarketResampler(Minute(1))\n    data_stream = [MarketDataPoint(DateTime(2024, 1, 1, 9, 30, i), 100.0, 1000.0) for i in 1:100000]\n\n    @profile begin\n        for data in data_stream\n            fit!(resampler, data)\n        end\n    end\nend\n\nprofile_resampling()\nProfile.print()  # Analyze where time is spent","category":"page"},{"location":"user_guide/#Validation-and-Testing","page":"User Guide","title":"Validation and Testing","text":"","category":"section"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"Always validate your results:","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"function validate_ohlc(ohlc::OHLC)\n    @assert ohlc.high >= ohlc.open \"High should be >= Open\"\n    @assert ohlc.high >= ohlc.close \"High should be >= Close\"\n    @assert ohlc.low <= ohlc.open \"Low should be <= Open\"\n    @assert ohlc.low <= ohlc.close \"Low should be <= Close\"\n    @assert ohlc.high >= ohlc.low \"High should be >= Low\"\nend\n\n# Use in your processing pipeline\nresampler = MarketResampler(Minute(1))\n# ... process data ...\nresult = value(resampler)\n\nif result.price.ohlc !== nothing\n    validate_ohlc(result.price.ohlc)\n    println(\"OHLC validation passed ✓\")\nend","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"user_guide/","page":"User Guide","title":"User Guide","text":"This user guide covers the essential aspects of using OnlineResamplers.jl effectively. For more detailed API information, see the API Reference, and for step-by-step learning, check out the Tutorial.","category":"page"},{"location":"#OnlineResamplers.jl-Documentation","page":"Home","title":"OnlineResamplers.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the comprehensive documentation for OnlineResamplers.jl - a high-performance Julia package for real-time resampling of financial market data.","category":"page"},{"location":"#Documentation-Overview","page":"Home","title":"Documentation Overview","text":"","category":"section"},{"location":"#Getting-Started","page":"Home","title":"📚 Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tutorial - Step-by-step guide from basic concepts to advanced usage\nInstallation and setup\nCore concepts (MarketDataPoint, TimeWindow, OHLC)\nBasic resampling strategies\nReal-time processing patterns\nPerformance optimization tips","category":"page"},{"location":"#Comprehensive-Reference","page":"Home","title":"📖 Comprehensive Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"User Guide - Complete guide with detailed examples and best practices\nInstallation options\nCore concepts and data structures\nBasic and advanced usage patterns\nReal-world examples (CSV processing, multi-timeframe analysis)\nPerformance optimization strategies\nOnlineStats integration\nTroubleshooting and debugging\nAPI Reference - Detailed technical documentation\nComplete function signatures and parameters\nType specifications and compatibility\nReturn value documentation\nPerformance characteristics\nUsage examples for each function\nEdge Cases & Limitations - Important behaviors and gotchas\nOut-of-order data handling\nEmpty windows and single data points\nType mismatch issues\nMemory considerations\nBest practices for edge cases","category":"page"},{"location":"#Examples-and-Patterns","page":"Home","title":"💡 Examples and Patterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Advanced Examples - Complex real-world scenarios\nusage_example.jl - Basic usage patterns\nadvanced_examples.jl - Complex scenarios including:\nMulti-timeframe analysis\nHigh-precision calculations\nReal-time streaming\nParallel processing\nPerformance demonstrations\nout_of_order_data.jl - Handling non-chronological data","category":"page"},{"location":"#Tests","page":"Home","title":"🧪 Tests","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Test Suite - Comprehensive test coverage\ntest_resampler.jl - Core functionality tests","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Quick-Navigation","page":"Home","title":"Quick Navigation","text":"","category":"section"},{"location":"#By-Use-Case","page":"Home","title":"By Use Case","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use Case Documentation Examples\nGetting Started Tutorial - Getting Started Basic Usage\nOHLC Candlesticks User Guide - OHLC OHLC Examples\nHigh-Precision Data Tutorial - Custom Types Precision Examples\nReal-time Processing Tutorial - Real-time Streaming Examples\nPerformance Optimization User Guide - Performance Benchmarks\nParallel Processing Tutorial - Parallel Merge Examples\nOut-of-Order Data Edge Cases - Out-of-Order Out-of-Order Examples","category":"page"},{"location":"#By-Experience-Level","page":"Home","title":"By Experience Level","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Level Start Here Then Read Finally Try\nBeginner Tutorial User Guide - Basic Usage Basic Examples\nIntermediate User Guide API Reference Advanced Examples\nExpert API Reference Source Code Custom implementations","category":"page"},{"location":"#By-Topic","page":"Home","title":"By Topic","text":"","category":"section"},{"location":"#Core-Concepts","page":"Home","title":"Core Concepts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MarketDataPoint Structure\nTime Windows\nOHLC Data Format\nOnlineStatsBase Integration","category":"page"},{"location":"#Resampling-Methods","page":"Home","title":"Resampling Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OHLC Resampling - Candlestick aggregation\nMean Price Resampling - Average price calculation\nVolume Sum Resampling - Volume aggregation","category":"page"},{"location":"#Advanced-Features","page":"Home","title":"Advanced Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Chronological Validation - Built-in out-of-order data detection\nCustom Numeric Types\nParallel Processing\nMulti-timeframe Analysis\nPerformance Optimization","category":"page"},{"location":"#Integration","page":"Home","title":"Integration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OnlineStats Ecosystem\nCSV Data Processing\nReal-time Data Streams","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Package-Architecture","page":"Home","title":"Package Architecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OnlineResamplers.jl is built on a clean, extensible architecture:","category":"page"},{"location":"","page":"Home","title":"Home","text":"OnlineResamplers.jl\n├── Core Types\n│   ├── MarketDataPoint{T,P,V}      # Input data structure\n│   ├── OHLC{P}                     # Price aggregation result\n│   └── TimeWindow{T}               # Time interval definition\n├── Abstract Types\n│   └── AbstractResampler{T,P,V}    # Base for all resamplers\n├── Concrete Resamplers\n│   ├── OHLCResampler{T,P,V}        # OHLC price aggregation\n│   ├── MeanResampler{T,P,V}        # Mean price aggregation\n│   ├── SumResampler{T,P,V}         # Sum aggregation (volumes)\n│   └── MarketResampler{T,P,V}      # Composite resampler\n└── OnlineStatsBase Integration\n    ├── fit!(resampler, data)       # Process data\n    ├── value(resampler)            # Get results\n    ├── nobs(resampler)             # Count observations\n    └── merge!(r1, r2)              # Combine resamplers","category":"page"},{"location":"#Type-System","page":"Home","title":"Type System","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package uses a comprehensive parametric type system:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T: Timestamp type (DateTime, NanoDate, ZonedDateTime, etc.)\nP: Price type (Float64, FixedDecimal, Rational, etc.)\nV: Volume type (Float64, FixedDecimal, Int64, etc.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This design enables:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Type Safety: Compile-time type checking prevents runtime errors\nPerformance: Type-stable operations for maximum speed\nFlexibility: Support for any numeric type with appropriate operations\nPrecision: Use exact arithmetic types for financial calculations","category":"page"},{"location":"#Performance-Characteristics","page":"Home","title":"Performance Characteristics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OnlineResamplers.jl is designed for high-performance applications:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Memory: O(1) constant memory usage regardless of data volume\nSpeed: ~50 nanoseconds per operation on modern hardware\nThroughput: >2 million operations per second\nAllocations: Zero allocations in steady-state processing\nScalability: Supports parallel processing with merge operations","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We welcome contributions! Areas where help is especially appreciated:","category":"page"},{"location":"","page":"Home","title":"Home","text":"New Resampling Methods: Implement additional aggregation strategies\nPerformance Improvements: Optimize hot code paths\nDocumentation: Improve examples and explanations\nTesting: Add test cases for edge conditions\nIntegration: Examples with other Julia packages","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the source code and test files for implementation examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Support-and-Community","page":"Home","title":"Support and Community","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Issues: Report bugs and request features on GitHub Issues\nDiscussions: Ask questions on GitHub Discussions\nDocumentation: Contribute improvements to help others learn","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation covers OnlineResamplers.jl v0.1.0 and later. For earlier versions, please refer to the appropriate git tags.","category":"page"},{"location":"tutorial/#OnlineResamplers.jl-Tutorial","page":"Tutorial","title":"OnlineResamplers.jl Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial will guide you through the main features of OnlineResamplers.jl, from basic usage to advanced applications.","category":"page"},{"location":"tutorial/#Table-of-Contents","page":"Tutorial","title":"Table of Contents","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Getting Started\nBasic Resampling\nUnderstanding Time Windows\nWorking with Different Data Types\nAdvanced Resampling Strategies\nReal-time Data Processing\nPerformance Optimization\nBest Practices","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Getting-Started","page":"Tutorial","title":"Getting Started","text":"","category":"section"},{"location":"tutorial/#Installation","page":"Tutorial","title":"Installation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Pkg\nPkg.add(url=\"https://github.com/femtotrader/OnlineResamplers.jl\")","category":"page"},{"location":"tutorial/#Basic-Setup","page":"Tutorial","title":"Basic Setup","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using OnlineResamplers, OnlineStatsBase, Dates","category":"page"},{"location":"tutorial/#Your-First-Resampler","page":"Tutorial","title":"Your First Resampler","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Create a simple 1-minute OHLC resampler\nresampler = MarketResampler(Minute(1))\n\n# Create some sample market data\ndata1 = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0)\ndata2 = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 105.0, 800.0)\ndata3 = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 45), 98.0, 1200.0)\n\n# Process the data\nfit!(resampler, data1)\nfit!(resampler, data2)\nfit!(resampler, data3)\n\n# Get the results\nresult = value(resampler)\nprintln(\"OHLC: $(result.price.ohlc)\")\nprintln(\"Volume: $(result.volume)\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Output:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OHLC: OHLC(100.0, 105.0, 98.0, 98.0)\nVolume: 3000.0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Basic-Resampling","page":"Tutorial","title":"Basic Resampling","text":"","category":"section"},{"location":"tutorial/#OHLC-(Open,-High,-Low,-Close)-Resampling","page":"Tutorial","title":"OHLC (Open, High, Low, Close) Resampling","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OHLC resampling is the most common way to aggregate tick data into candlestick charts:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Create OHLC resampler (this is the default)\nohlc_resampler = MarketResampler(Minute(1), price_method=:ohlc)\n\n# Sample tick data within one minute\nbase_time = DateTime(2024, 1, 1, 14, 30, 0)\nticks = [\n    MarketDataPoint(base_time + Second(0), 100.00, 1000.0),   # Open\n    MarketDataPoint(base_time + Second(15), 102.50, 800.0),   # High\n    MarketDataPoint(base_time + Second(30), 97.75, 1200.0),   # Low\n    MarketDataPoint(base_time + Second(45), 101.25, 900.0)    # Close\n]\n\n# Process all ticks\nfor tick in ticks\n    fit!(ohlc_resampler, tick)\nend\n\nresult = value(ohlc_resampler)\nohlc = result.price.ohlc\n\nprintln(\"Open:  $(ohlc.open)\")     # 100.00 (first price)\nprintln(\"High:  $(ohlc.high)\")     # 102.50 (highest price)\nprintln(\"Low:   $(ohlc.low)\")      # 97.75  (lowest price)\nprintln(\"Close: $(ohlc.close)\")    # 101.25 (last price)\nprintln(\"Volume: $(result.volume)\") # 3900.0 (total volume)","category":"page"},{"location":"tutorial/#Mean-Price-Resampling","page":"Tutorial","title":"Mean Price Resampling","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For applications requiring smoothed price data:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Create mean price resampler\nmean_resampler = MarketResampler(Minute(5), price_method=:mean)\n\n# Process the same data\nfor tick in ticks\n    fit!(mean_resampler, tick)\nend\n\nresult = value(mean_resampler)\nmean_price = result.price.mean_price\n\nprintln(\"Mean Price: $(mean_price)\")  # 100.375 ((100+102.5+97.75+101.25)/4)\nprintln(\"Volume: $(result.volume)\")   # 3900.0","category":"page"},{"location":"tutorial/#Chronological-Data-Validation","page":"Tutorial","title":"Chronological Data Validation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OnlineResamplers is designed for streaming data and assumes chronological order. You can enable validation to detect and prevent out-of-order data:","category":"page"},{"location":"tutorial/#Default-Behavior-(No-Validation)","page":"Tutorial","title":"Default Behavior (No Validation)","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# By default, validation is disabled for performance\nresampler = MarketResampler(Minute(1))  # validate_chronological=false by default\n\n# This allows out-of-order data but may cause unexpected behavior\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\nfit!(resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 29, 0), 99.0, 800.0))   # Out of order!","category":"page"},{"location":"tutorial/#Enabled-Validation","page":"Tutorial","title":"Enabled Validation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Enable chronological validation\nvalidated_resampler = MarketResampler(Minute(1), validate_chronological=true)\n\n# Process data chronologically - this works fine\nfit!(validated_resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0))\nfit!(validated_resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 105.0, 800.0))\n\n# This will throw an ArgumentError with detailed message\ntry\n    fit!(validated_resampler, MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 15), 95.0, 1200.0))\ncatch e\n    println(\"Error: Out-of-order data detected!\")\n    # ArgumentError: Data not in chronological order: 2024-01-01T09:30:15 <= 2024-01-01T09:30:30\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"When to use validation:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"✅ When processing historical data that might be unsorted\n✅ When debugging data quality issues\n✅ When data integrity is critical\n❌ High-frequency real-time streams (performance impact)\n❌ When you're certain data is already chronologically ordered","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Understanding-Time-Windows","page":"Tutorial","title":"Understanding Time Windows","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Time windows are fundamental to how OnlineResamplers groups data:","category":"page"},{"location":"tutorial/#How-Time-Windows-Work","page":"Tutorial","title":"How Time Windows Work","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Dates\n\n# Create a 1-minute window starting at 9:30 AM\nwindow = TimeWindow{DateTime}(DateTime(2024, 1, 1, 9, 30, 0), Minute(1))\n\n# The window covers [9:30:00, 9:31:00)\nprintln(\"Window start: $(window.start_time)\")          # 2024-01-01T09:30:00\nprintln(\"Window end: $(window_end(window))\")           # 2024-01-01T09:31:00\n\n# Test timestamps\ntimestamps = [\n    DateTime(2024, 1, 1, 9, 29, 59),  # Before window\n    DateTime(2024, 1, 1, 9, 30, 0),   # Start of window\n    DateTime(2024, 1, 1, 9, 30, 30),  # Middle of window\n    DateTime(2024, 1, 1, 9, 31, 0)    # Start of next window\n]\n\nfor ts in timestamps\n    belongs = belongs_to_window(ts, window)\n    println(\"$(ts): $(belongs)\")\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Output:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"2024-01-01T09:29:59: false\n2024-01-01T09:30:00: true\n2024-01-01T09:30:30: true\n2024-01-01T09:31:00: false","category":"page"},{"location":"tutorial/#Window-Transitions","page":"Tutorial","title":"Window Transitions","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Resamplers automatically handle window transitions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"resampler = MarketResampler(Minute(1))\n\n# First window data\ndata1 = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 0), 100.0, 1000.0)\ndata2 = MarketDataPoint(DateTime(2024, 1, 1, 9, 30, 30), 105.0, 800.0)\n\n# Second window data (next minute)\ndata3 = MarketDataPoint(DateTime(2024, 1, 1, 9, 31, 0), 110.0, 1200.0)\ndata4 = MarketDataPoint(DateTime(2024, 1, 1, 9, 31, 30), 108.0, 900.0)\n\n# Process first window\nfit!(resampler, data1)\nfit!(resampler, data2)\nresult1 = value(resampler)\nprintln(\"First window OHLC: $(result1.price.ohlc)\")\nprintln(\"Window: $(result1.window.start_time)\")\n\n# Process second window - resampler automatically resets\nfit!(resampler, data3)\nfit!(resampler, data4)\nresult2 = value(resampler)\nprintln(\"Second window OHLC: $(result2.price.ohlc)\")\nprintln(\"Window: $(result2.window.start_time)\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Working-with-Different-Data-Types","page":"Tutorial","title":"Working with Different Data Types","text":"","category":"section"},{"location":"tutorial/#High-Precision-Financial-Data","page":"Tutorial","title":"High-Precision Financial Data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OnlineResamplers supports custom numeric types for high-precision calculations:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Using Rational numbers for exact arithmetic\nPrecisePrice = Rational{Int128}\nPreciseVolume = Rational{Int64}\n\n# Create high-precision resampler\nprecise_resampler = MarketResampler{DateTime, PrecisePrice, PreciseVolume}(\n    Minute(1), price_method=:ohlc\n)\n\n# High-precision data\nprecise_data = MarketDataPoint{DateTime, PrecisePrice, PreciseVolume}(\n    DateTime(2024, 1, 1, 9, 30, 0),\n    PrecisePrice(1001234, 10000),  # 100.1234 exactly\n    PreciseVolume(10005, 10)       # 1000.5 exactly\n)\n\nfit!(precise_resampler, precise_data)\nresult = value(precise_resampler)\n\nprintln(\"Precise OHLC: $(result.price.ohlc)\")\nprintln(\"Precise Volume: $(result.volume)\")","category":"page"},{"location":"tutorial/#Custom-Time-Types","page":"Tutorial","title":"Custom Time Types","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Example with custom time handling (conceptual)\n# In practice, you'd use libraries like NanoDates.jl or TimeZones.jl\n\n# Standard DateTime usage\ndatetime_resampler = MarketResampler{DateTime, Float64, Float64}(Minute(1))\n\n# The resampler will work with any type T that supports:\n# - T + Period -> T (arithmetic)\n# - T comparison operators\n# - floor(T, Period) -> T (for window alignment)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Advanced-Resampling-Strategies","page":"Tutorial","title":"Advanced Resampling Strategies","text":"","category":"section"},{"location":"tutorial/#Individual-Resamplers","page":"Tutorial","title":"Individual Resamplers","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For specialized use cases, you can use individual resampler types:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Pure OHLC resampler\nohlc_only = OHLCResampler(Minute(1))\n\n# Mean price resampler\nmean_only = MeanResampler(Minute(5))\n\n# Volume sum resampler\nvolume_sum = SumResampler(Second(30))\n\n# Process data\nsample_data = MarketDataPoint(DateTime(2024, 1, 1, 10, 0, 0), 100.0, 1000.0)\n\nfit!(ohlc_only, sample_data)\nfit!(mean_only, sample_data)\nfit!(volume_sum, sample_data)\n\n# Get individual results\nohlc_result = value(ohlc_only)\nmean_result = value(mean_only)\nvolume_result = value(volume_sum)\n\nprintln(\"OHLC only: $(ohlc_result)\")\nprintln(\"Mean only: $(mean_result)\")\nprintln(\"Volume sum: $(volume_result)\")","category":"page"},{"location":"tutorial/#Multi-timeframe-Analysis","page":"Tutorial","title":"Multi-timeframe Analysis","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Analyze the same data stream across multiple timeframes:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Create resamplers for different timeframes\ntimeframes = Dict(\n    \"1min\" => MarketResampler(Minute(1)),\n    \"5min\" => MarketResampler(Minute(5)),\n    \"15min\" => MarketResampler(Minute(15)),\n    \"1hour\" => MarketResampler(Hour(1))\n)\n\n# Generate sample data\nbase_time = DateTime(2024, 1, 1, 9, 0, 0)\nsample_ticks = [\n    MarketDataPoint(base_time + Minute(i), 100.0 + randn(), rand(500:1500))\n    for i in 1:60  # 1 hour of minute-level data\n]\n\n# Process through all timeframes\nfor tick in sample_ticks\n    for (name, resampler) in timeframes\n        fit!(resampler, tick)\n    end\nend\n\n# Display results\nprintln(\"Multi-timeframe Analysis:\")\nfor (name, resampler) in sort(collect(timeframes))\n    result = value(resampler)\n    if result.price.ohlc !== nothing\n        ohlc = result.price.ohlc\n        println(\"$name: O=$(round(ohlc.open, digits=2)), \" *\n                \"H=$(round(ohlc.high, digits=2)), \" *\n                \"L=$(round(ohlc.low, digits=2)), \" *\n                \"C=$(round(ohlc.close, digits=2)), \" *\n                \"Vol=$(round(result.volume))\")\n    end\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Real-time-Data-Processing","page":"Tutorial","title":"Real-time Data Processing","text":"","category":"section"},{"location":"tutorial/#Stream-Processing-with-Window-Detection","page":"Tutorial","title":"Stream Processing with Window Detection","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For real-time applications, you often need to detect when windows complete:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"mutable struct RealTimeProcessor\n    resampler::MarketResampler\n    completed_bars::Vector{NamedTuple}\n    current_window::Union{TimeWindow, Nothing}\nend\n\nfunction RealTimeProcessor(period::Period)\n    RealTimeProcessor(\n        MarketResampler(period),\n        NamedTuple[],\n        nothing\n    )\nend\n\nfunction process_tick!(processor::RealTimeProcessor, tick::MarketDataPoint)\n    # Get current state before processing\n    old_result = value(processor.resampler)\n    old_window = old_result.window\n\n    # Process the tick\n    fit!(processor.resampler, tick)\n\n    # Check for window completion\n    new_result = value(processor.resampler)\n    new_window = new_result.window\n\n    if old_window !== nothing && new_window != old_window\n        # Window completed! Save the bar\n        if old_result.price.ohlc !== nothing\n            completed_bar = (\n                timestamp = old_window.start_time,\n                open = old_result.price.ohlc.open,\n                high = old_result.price.ohlc.high,\n                low = old_result.price.ohlc.low,\n                close = old_result.price.ohlc.close,\n                volume = old_result.volume\n            )\n            push!(processor.completed_bars, completed_bar)\n\n            # Callback for completed bar\n            on_bar_complete(completed_bar)\n        end\n    end\n\n    processor.current_window = new_window\nend\n\nfunction on_bar_complete(bar)\n    println(\"✅ Bar completed: $(bar.timestamp) - \" *\n            \"OHLC($(bar.open), $(bar.high), $(bar.low), $(bar.close)) \" *\n            \"Vol: $(bar.volume)\")\nend\n\n# Usage example\nprocessor = RealTimeProcessor(Minute(1))\n\n# Simulate real-time tick stream\nstream_base = DateTime(2024, 1, 1, 14, 30, 0)\nfor minute in 0:2, second in [0, 30]\n    timestamp = stream_base + Minute(minute) + Second(second)\n    tick = MarketDataPoint(timestamp, 100.0 + minute + randn()*0.1, rand(800:1200))\n    process_tick!(processor, tick)\nend","category":"page"},{"location":"tutorial/#Parallel-Processing","page":"Tutorial","title":"Parallel Processing","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For high-throughput applications, process data in parallel and merge results:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Function to process a chunk of data\nfunction process_chunk(data_chunk::Vector, period::Period)\n    chunk_resampler = OHLCResampler{DateTime, Float64, Float64}(period)\n    for data in data_chunk\n        fit!(chunk_resampler, data)\n    end\n    return chunk_resampler\nend\n\n# Generate large dataset\nlarge_dataset = [\n    MarketDataPoint(DateTime(2024, 1, 1, 9, 0, i), 100.0 + sin(i/100), rand(500:1500))\n    for i in 1:10000\n]\n\n# Split into chunks for parallel processing\nchunk_size = 2500\nchunks = [large_dataset[i:min(i+chunk_size-1, end)] for i in 1:chunk_size:length(large_dataset)]\n\n# Process chunks (in real applications, use @distributed or threading)\nchunk_resamplers = [process_chunk(chunk, Minute(1)) for chunk in chunks]\n\n# Merge all results\nfinal_resampler = chunk_resamplers[1]\nfor i in 2:length(chunk_resamplers)\n    merge!(final_resampler, chunk_resamplers[i])\nend\n\nmerged_result = value(final_resampler)\nprintln(\"Merged OHLC: $(merged_result.ohlc)\")\nprintln(\"Total observations: $(nobs(final_resampler))\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Performance-Optimization","page":"Tutorial","title":"Performance Optimization","text":"","category":"section"},{"location":"tutorial/#Memory-Efficiency","page":"Tutorial","title":"Memory Efficiency","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OnlineResamplers uses constant memory regardless of data volume:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Memory usage stays constant even with millions of data points\nmemory_test_resampler = MarketResampler(Minute(1))\n\nprintln(\"Processing 1 million data points...\")\nfor i in 1:1_000_000\n    timestamp = DateTime(2024, 1, 1, 9, 0, 0) + Millisecond(i)\n    data = MarketDataPoint(timestamp, 100.0 + sin(i/1000), 1000.0)\n    fit!(memory_test_resampler, data)\n\n    # Memory usage remains constant due to window transitions\nend\n\nresult = value(memory_test_resampler)\nprintln(\"Current window has $(nobs(memory_test_resampler)) observations\")\nprintln(\"Memory usage is O(1) - constant regardless of total data processed\")","category":"page"},{"location":"tutorial/#Type-Stability","page":"Tutorial","title":"Type Stability","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For maximum performance, use concrete types:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Good: Concrete types\nfast_resampler = MarketResampler{DateTime, Float64, Float64}(Minute(1))\n\n# Less optimal: Abstract types (avoid if performance is critical)\n# slow_resampler = MarketResampler{Any, Any, Any}(Minute(1))\n\n# Concrete types enable compiler optimizations\nfunction high_performance_processing(resampler::MarketResampler{DateTime, Float64, Float64},\n                                   data_stream::Vector{MarketDataPoint{DateTime, Float64, Float64}})\n    for data in data_stream\n        fit!(resampler, data)\n    end\n    return value(resampler)\nend","category":"page"},{"location":"tutorial/#Batch-Processing","page":"Tutorial","title":"Batch Processing","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Process data in batches for optimal performance:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function batch_process_ticks(resampler, ticks::Vector)\n    # Process all ticks without intermediate value() calls\n    for tick in ticks\n        fit!(resampler, tick)\n    end\n\n    # Get result only once at the end\n    return value(resampler)\nend\n\n# This is faster than calling value() after each fit!()\nbatch_resampler = MarketResampler(Minute(1))\nbatch_ticks = [MarketDataPoint(now(), 100.0 + randn(), 1000.0) for _ in 1:1000]\n\nresult = batch_process_ticks(batch_resampler, batch_ticks)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Best-Practices","page":"Tutorial","title":"Best Practices","text":"","category":"section"},{"location":"tutorial/#1.-Choose-the-Right-Time-Period","page":"Tutorial","title":"1. Choose the Right Time Period","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# High-frequency trading: sub-second intervals\nhft_resampler = MarketResampler(Millisecond(100))\n\n# Algorithmic trading: minute-level\nalgo_resampler = MarketResampler(Minute(1))\n\n# Position management: hourly or daily\nposition_resampler = MarketResampler(Hour(1))","category":"page"},{"location":"tutorial/#2.-Handle-Time-Zone-Consistency","page":"Tutorial","title":"2. Handle Time Zone Consistency","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# Always use consistent time zones\nusing TimeZones\n\n# Convert all timestamps to UTC before processing\nfunction to_utc(local_time::DateTime, tz::TimeZone)\n    zoned_time = ZonedDateTime(local_time, tz)\n    return DateTime(astimezone(zoned_time, tz\"UTC\"))\nend\n\n# Process in UTC, display in local time as needed","category":"page"},{"location":"tutorial/#3.-Validate-Input-Data","page":"Tutorial","title":"3. Validate Input Data","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function safe_process_tick(resampler, timestamp, price, volume)\n    # Validate inputs\n    if price <= 0\n        @warn \"Invalid price: $price\"\n        return nothing\n    end\n\n    if volume < 0\n        @warn \"Invalid volume: $volume\"\n        return nothing\n    end\n\n    # Create and process data\n    tick = MarketDataPoint(timestamp, price, volume)\n    fit!(resampler, tick)\n    return value(resampler)\nend","category":"page"},{"location":"tutorial/#4.-Monitor-Window-Transitions","page":"Tutorial","title":"4. Monitor Window Transitions","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function monitored_processing(resampler, tick)\n    old_window = value(resampler).window\n    fit!(resampler, tick)\n    new_window = value(resampler).window\n\n    if old_window !== nothing && new_window != old_window\n        @info \"Window transition: $(old_window.start_time) -> $(new_window.start_time)\"\n        # Handle window completion logic here\n    end\nend","category":"page"},{"location":"tutorial/#5.-Error-Handling","page":"Tutorial","title":"5. Error Handling","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function robust_resampling(ticks)\n    resampler = MarketResampler(Minute(1))\n    successful_ticks = 0\n    errors = 0\n\n    for tick in ticks\n        try\n            fit!(resampler, tick)\n            successful_ticks += 1\n        catch e\n            @warn \"Failed to process tick: $tick\" exception=(e, catch_backtrace())\n            errors += 1\n        end\n    end\n\n    @info \"Processing complete: $successful_ticks successful, $errors errors\"\n    return value(resampler)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Conclusion","page":"Tutorial","title":"Conclusion","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OnlineResamplers.jl provides a powerful and flexible framework for real-time market data aggregation. Key takeaways:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Start Simple: Begin with MarketResampler(Minute(1)) for basic OHLC resampling\nChoose Your Types: Use concrete types for performance, custom types for precision\nHandle Windows: Understand how time windows work and transition\nScale Up: Use parallel processing and merging for high-throughput applications\nMonitor Performance: Leverage constant memory usage and type stability for optimal speed","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For more advanced usage patterns and examples, see the examples/ directory and the API reference documentation.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/#Next-Steps","page":"Tutorial","title":"Next Steps","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Explore the API Reference for detailed function documentation\nCheck out Advanced Examples for complex use cases\nRead the source code for implementation details\nContribute improvements and new features!","category":"page"}]
}
